// Code generated by goctl. DO NOT EDIT.
// Source: follow.proto

package server

import (
	"context"

	"MiniDY/app/social/cmd/rpc/internal/logic"
	"MiniDY/app/social/cmd/rpc/internal/svc"
	"MiniDY/app/social/cmd/rpc/pb"
)

type FollowerserviceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedFollowerserviceServer
}

func NewFollowerserviceServer(svcCtx *svc.ServiceContext) *FollowerserviceServer {
	return &FollowerserviceServer{
		svcCtx: svcCtx,
	}
}

// 关系操作
func (s *FollowerserviceServer) RelationAction(ctx context.Context, in *pb.DouyinRelationActionRequest) (*pb.DouyinRelationActionResponse, error) {
	l := logic.NewRelationActionLogic(ctx, s.svcCtx)
	return l.RelationAction(in)
}

// 用户关注列表
func (s *FollowerserviceServer) UserFollowList(ctx context.Context, in *pb.DouyinRelationFollowListRequest) (*pb.DouyinRelationFollowListResponse, error) {
	l := logic.NewUserFollowListLogic(ctx, s.svcCtx)
	return l.UserFollowList(in)
}

// 用户粉丝列表
func (s *FollowerserviceServer) UserFollowerList(ctx context.Context, in *pb.DouyinRelationFollowerListRequest) (*pb.DouyinRelationFollowerListResponse, error) {
	l := logic.NewUserFollowerListLogic(ctx, s.svcCtx)
	return l.UserFollowerList(in)
}

// 用户好友列表
func (s *FollowerserviceServer) UserFriendList(ctx context.Context, in *pb.DouyinRelationFriendListRequest) (*pb.DouyinRelationFriendListResponse, error) {
	l := logic.NewUserFriendListLogic(ctx, s.svcCtx)
	return l.UserFriendList(in)
}
