// Code generated by goctl. DO NOT EDIT.

package comment

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentIdPrefix      = "cache:comment:id:"
	cacheCommentVideoIdPrefix = "cache:comment:videoId:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comment, error)
		FindOneByVideoId(ctx context.Context, videoId int64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, id int64) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindAllCommentsByVideoId(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string)([]int64, error)
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		Id         int64        `db:"id"`          // 评论表id
		VideoId    int64        `db:"video_id"`    // 视频id
		UserId     int64        `db:"user_id"`     // 评论用户的id
		Content    string       `db:"content"`     // 评论内容
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeletedAt  sql.NullTime `db:"deleted_at"`  // 逻辑删除
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	commentVideoIdKey := fmt.Sprintf("%s%v", cacheCommentVideoIdPrefix, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, commentIdKey, commentVideoIdKey)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, commentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByVideoId(ctx context.Context, videoId int64) (*Comment, error) {
	commentVideoIdKey := fmt.Sprintf("%s%v", cacheCommentVideoIdPrefix, videoId)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, commentVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, videoId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	commentVideoIdKey := fmt.Sprintf("%s%v", cacheCommentVideoIdPrefix, data.VideoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.VideoId, data.UserId, data.Content, data.DeletedAt)
	}, commentIdKey, commentVideoIdKey)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, newData *Comment) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	commentVideoIdKey := fmt.Sprintf("%s%v", cacheCommentVideoIdPrefix, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.VideoId, newData.UserId, newData.Content, newData.DeletedAt, newData.Id)
	}, commentIdKey, commentVideoIdKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}

func(m *defaultCommentModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error{
	return m.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s )
	})
}

func (m *defaultCommentModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func(m* defaultCommentModel)FindAllCommentsByVideoId(ctx context.Context, builder squirrel.SelectBuilder, orderBy string)([]int64, error){

	builder = builder.Columns(commentRows)

	if orderBy == ""{
		builder = builder.OrderBy("id DESC")
	}else{
		builder = builder.OrderBy(orderBy)
	}
	query, values, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Comment
	var commentIdList []int64

	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)

	for i := range resp{
		commentIdList = append(commentIdList, resp[i].Id)
	}
	switch err {
	case nil:
		return commentIdList, nil
	default:
		return nil, err
	}
}