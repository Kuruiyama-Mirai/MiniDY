// Code generated by goctl. DO NOT EDIT.

package favorite

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	favoriteFieldNames          = builder.RawFieldNames(&Favorite{})
	favoriteRows                = strings.Join(favoriteFieldNames, ",")
	favoriteRowsExpectAutoSet   = strings.Join(stringx.Remove(favoriteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	favoriteRowsWithPlaceHolder = strings.Join(stringx.Remove(favoriteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFavoriteIdPrefix            = "cache:favorite:id:"
	cacheFavoriteUserIdPrefix        = "cache:favorite:userId:"
	cacheFavoriteUserIdVideoIdPrefix = "cache:favorite:userId:videoId:"
)

type (
	favoriteModel interface {
		Insert(ctx context.Context, data *Favorite) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Favorite, error)
		FindOneByUserId(ctx context.Context, userId int64) (*Favorite, error)
		FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*Favorite, error)
		Update(ctx context.Context, data *Favorite) error
		Delete(ctx context.Context, id int64) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindAllFavoriteByUserId(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string)([]int64, error)
	}

	defaultFavoriteModel struct {
		sqlc.CachedConn
		table string
	}

	Favorite struct {
		Id         int64        `db:"id"`          // 点赞表的主键
		UserId     int64        `db:"user_id"`     // 点赞人的id
		VideoId    int64        `db:"video_id"`    // 视频id
		Status     int64        `db:"status"`      // 点赞状态1为点赞2为取消
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeletedAt  sql.NullTime `db:"deleted_at"`  // 逻辑删除
	}
)

func newFavoriteModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFavoriteModel {
	return &defaultFavoriteModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`favorite`",
	}
}

func (m *defaultFavoriteModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	favoriteIdKey := fmt.Sprintf("%s%v", cacheFavoriteIdPrefix, id)
	favoriteUserIdKey := fmt.Sprintf("%s%v", cacheFavoriteUserIdPrefix, data.UserId)
	favoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, favoriteIdKey, favoriteUserIdKey, favoriteUserIdVideoIdKey)
	return err
}

func (m *defaultFavoriteModel) FindOne(ctx context.Context, id int64) (*Favorite, error) {
	favoriteIdKey := fmt.Sprintf("%s%v", cacheFavoriteIdPrefix, id)
	var resp Favorite
	err := m.QueryRowCtx(ctx, &resp, favoriteIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", favoriteRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoriteModel) FindOneByUserId(ctx context.Context, userId int64) (*Favorite, error) {
	favoriteUserIdKey := fmt.Sprintf("%s%v", cacheFavoriteUserIdPrefix, userId)
	var resp Favorite
	err := m.QueryRowIndexCtx(ctx, &resp, favoriteUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", favoriteRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoriteModel) FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*Favorite, error) {
	favoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheFavoriteUserIdVideoIdPrefix, userId, videoId)
	var resp Favorite
	err := m.QueryRowIndexCtx(ctx, &resp, favoriteUserIdVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `video_id` = ? limit 1", favoriteRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, videoId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoriteModel) Insert(ctx context.Context, data *Favorite) (sql.Result, error) {
	favoriteIdKey := fmt.Sprintf("%s%v", cacheFavoriteIdPrefix, data.Id)
	favoriteUserIdKey := fmt.Sprintf("%s%v", cacheFavoriteUserIdPrefix, data.UserId)
	favoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, favoriteRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.Status, data.DeletedAt)
	}, favoriteIdKey, favoriteUserIdKey, favoriteUserIdVideoIdKey)
	return ret, err
}

func (m *defaultFavoriteModel) Update(ctx context.Context, newData *Favorite) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	favoriteIdKey := fmt.Sprintf("%s%v", cacheFavoriteIdPrefix, data.Id)
	favoriteUserIdKey := fmt.Sprintf("%s%v", cacheFavoriteUserIdPrefix, data.UserId)
	favoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, favoriteRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.VideoId, newData.Status, newData.DeletedAt, newData.Id)
	}, favoriteIdKey, favoriteUserIdKey, favoriteUserIdVideoIdKey)
	return err
}

func (m *defaultFavoriteModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFavoriteIdPrefix, primary)
}

func (m *defaultFavoriteModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", favoriteRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFavoriteModel) tableName() string {
	return m.table
}

func(m *defaultFavoriteModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error{
	return m.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s )
	})
}

func (m *defaultFavoriteModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func(m* defaultFavoriteModel)FindAllFavoriteByUserId(ctx context.Context, builder squirrel.SelectBuilder, orderBy string)([]int64, error){

	builder = builder.Columns(favoriteRows)
	
	if orderBy == ""{
		builder = builder.OrderBy("id DESC")
	}else{
		builder = builder.OrderBy(orderBy)
	}
	query, values, err := builder.Where("status = ?",1).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*Favorite
	var videoIdList []int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)

	for i := range resp{
		videoIdList = append(videoIdList, resp[i].VideoId)
	}

	switch err {
	case nil:
		return videoIdList, nil
	default:
		return nil, err
	}
}