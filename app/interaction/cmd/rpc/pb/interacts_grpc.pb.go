// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0--rc3
// source: interacts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InteractsserviceClient is the client API for Interactsservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractsserviceClient interface {
	// 点赞
	VideoInteraction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error)
	// 喜欢列表
	VideoInteractionList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error)
	// 评论
	VideoCommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error)
	// 评论列表
	VideoCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error)
}

type interactsserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractsserviceClient(cc grpc.ClientConnInterface) InteractsserviceClient {
	return &interactsserviceClient{cc}
}

func (c *interactsserviceClient) VideoInteraction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error) {
	out := new(DouyinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, "/pb.interactsservice/videoInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactsserviceClient) VideoInteractionList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error) {
	out := new(DouyinFavoriteListResponse)
	err := c.cc.Invoke(ctx, "/pb.interactsservice/videoInteractionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactsserviceClient) VideoCommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error) {
	out := new(DouyinCommentActionResponse)
	err := c.cc.Invoke(ctx, "/pb.interactsservice/videoCommentAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactsserviceClient) VideoCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error) {
	out := new(DouyinCommentListResponse)
	err := c.cc.Invoke(ctx, "/pb.interactsservice/videoCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractsserviceServer is the server API for Interactsservice service.
// All implementations must embed UnimplementedInteractsserviceServer
// for forward compatibility
type InteractsserviceServer interface {
	// 点赞
	VideoInteraction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error)
	// 喜欢列表
	VideoInteractionList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error)
	// 评论
	VideoCommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error)
	// 评论列表
	VideoCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error)
	mustEmbedUnimplementedInteractsserviceServer()
}

// UnimplementedInteractsserviceServer must be embedded to have forward compatible implementations.
type UnimplementedInteractsserviceServer struct {
}

func (UnimplementedInteractsserviceServer) VideoInteraction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoInteraction not implemented")
}
func (UnimplementedInteractsserviceServer) VideoInteractionList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoInteractionList not implemented")
}
func (UnimplementedInteractsserviceServer) VideoCommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoCommentAction not implemented")
}
func (UnimplementedInteractsserviceServer) VideoCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoCommentList not implemented")
}
func (UnimplementedInteractsserviceServer) mustEmbedUnimplementedInteractsserviceServer() {}

// UnsafeInteractsserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractsserviceServer will
// result in compilation errors.
type UnsafeInteractsserviceServer interface {
	mustEmbedUnimplementedInteractsserviceServer()
}

func RegisterInteractsserviceServer(s grpc.ServiceRegistrar, srv InteractsserviceServer) {
	s.RegisterService(&Interactsservice_ServiceDesc, srv)
}

func _Interactsservice_VideoInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractsserviceServer).VideoInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.interactsservice/videoInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractsserviceServer).VideoInteraction(ctx, req.(*DouyinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactsservice_VideoInteractionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractsserviceServer).VideoInteractionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.interactsservice/videoInteractionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractsserviceServer).VideoInteractionList(ctx, req.(*DouyinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactsservice_VideoCommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractsserviceServer).VideoCommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.interactsservice/videoCommentAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractsserviceServer).VideoCommentAction(ctx, req.(*DouyinCommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactsservice_VideoCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractsserviceServer).VideoCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.interactsservice/videoCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractsserviceServer).VideoCommentList(ctx, req.(*DouyinCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interactsservice_ServiceDesc is the grpc.ServiceDesc for Interactsservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interactsservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.interactsservice",
	HandlerType: (*InteractsserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "videoInteraction",
			Handler:    _Interactsservice_VideoInteraction_Handler,
		},
		{
			MethodName: "videoInteractionList",
			Handler:    _Interactsservice_VideoInteractionList_Handler,
		},
		{
			MethodName: "videoCommentAction",
			Handler:    _Interactsservice_VideoCommentAction_Handler,
		},
		{
			MethodName: "videoCommentList",
			Handler:    _Interactsservice_VideoCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interacts.proto",
}
